
	/**
	* <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	* @param parent:
	* @param aTabbedPropertySheetPage:
	* @generated
	*/
	public void createControls(Composite parent, TabbedPropertySheetPage aTabbedPropertySheetPage) {
		super.createControls(parent, aTabbedPropertySheetPage);
		<%// UIField 2 widget %>
<%class widgetCreationGenerator{%>
<%boolean generateRichTextCreateControl = false;%>
<%private int getParentColumns(UIContainer container){
	int result = 1;
	for (UIField uiField : container.getUI_fields())
	if (uiField.getType().equals(UI_Field_Type.SIMPLE_CHOICE_LIST)
			|| uiField.getType().equals(UI_Field_Type.MULTIPLE_CHOICE_LIST)) {
		result = 6;
		break;
	}
	return result;
}%>
<%private void generateGroups(UIContainer container){%>
		<%// Ignore the UIContainers child of an UI. These UIContainer are used to define the PropertySection%> 
		<%if (!(container.eContainer() instanceof UI)){%>
			<%//Data initialization %>
			<%String groupName = container.getName();%>
			<%String groupLabel = ( container.getLabel() != null && container.getLabel().trim().length() > 0 ? "\""+container.getLabel()+"\"" : "ICommonConstants.EMPTY_STRING");%>
			<%String groupParent = "";%>
			<%EObject parent = container.eContainer();%>
			<%if (parent.eContainer() instanceof UI)
				groupParent = "rootParentComposite";
			else
				groupParent = ((UIContainer)parent).getName();%>
			<%//Code generation%>
			<%=groupName%> = getWidgetFactory().createGroup(<%=groupParent%>, <%=groupLabel%>);
			<%=groupName%>.setLayout(new GridLayout(<%=getParentColumns(container)%>, false));
			<% if (VPUIHelper.generateRichTextForUI_Container(container)) { %>
				GridData gd<%=groupName%> = new GridData(GridData.FILL_BOTH);
			<% } else { %>
				GridData gd<%=groupName%> = new GridData(GridData.FILL_HORIZONTAL);
			<%}%>
			gd<%=groupName%>.horizontalSpan = ((GridLayout)<%=groupParent%>.getLayout()).numColumns;
			<%=groupName%>.setLayoutData(gd<%=groupName%>);
		<%}%>
<%}%>
<%private String TextValueWidgetSkipParent(UIField uiField){
	if (uiField.eContainer().eContainer() instanceof UI)
		return "false";
	return "true";
}%>
<% // Widget creation generation recursive method %>
<%private void generateWidgets(UIContainer uiContainer){%>
	<%for (UIField uiField : uiContainer.getUI_fields()) {
				DataWidget iDatawidget = epfUtility.getDataOf(uiField);
		String widgetName = iDatawidget.widgetName; 
		String className = iDatawidget.widgetGraphicalClassName;
		String widgetLabel = iDatawidget.widgetLabel;
		String widgetParent = iDatawidget.widgetParentName;
	
	switch (uiField.getType()) {
			case TEXT:
			case TEXTAREA:%>
		<%=widgetName%> = new <%= className%>(<%=widgetParent%>, 
										"<%= widgetLabel%> :", 
										getWidgetFactory(), <%=TextValueWidgetSkipParent(uiField)%>);	
			  <%break;
			
			case CHECKBOX:
			case RADIOBOX:%>
		<%=widgetName%> = new <%= className%>(<%=widgetParent%>,
										getWidgetFactory());			
			  <%break;
			  
			case SIMPLE_CHOICE_LIST: %>
			<%=widgetName%> = new SimpleSemanticField(<%=widgetParent%>, 
											"<%=widgetLabel%> :", 
											getWidgetFactory(), 
											new SimpleSemanticFieldController()); 
				<%break;
			case MULTIPLE_CHOICE_LIST:%>
		<%=widgetName%> = new <%= className%>(<%=widgetParent%>, 
										"<%= widgetLabel%> :", 
										getWidgetFactory(),
										new <%=widgetName+"FieldController()"%>);
				<%break;
			case RICHTEXT:
			{
				if (!generateRichTextCreateControl)
					generateRichTextCreateControl = true;%>
				<%=widgetName%> = createRichtextControl(<%=widgetParent%>, "<%= widgetLabel%> :");
			<%}
			default:
				break;
		}
}%>
<%if (uiContainer.getSubContainers() != null && uiContainer.getSubContainers().size() > 0){
		for (UIContainer iUIContainer : uiContainer.getSubContainers()) {
			generateGroups(iUIContainer);
			generateWidgets(iUIContainer);
		}
	}%>
<%}%>
<%}%>

<%widgetCreationGenerator wcg = new widgetCreationGenerator();%>
<%wcg.generateWidgets(parameter);%>
	}
<% if (wcg.generateRichTextCreateControl){ %>
	/**
	* <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	* @param parent
	* @param label
	* @generated
	*/
	public MDERichTextWidget createRichtextControl(Composite parent, String label) {
		Label labelWidget = new Label(parent, SWT.NONE);
		labelWidget.setText(label);
		final MDERichTextWidget widget = (new MDERichTextFactory()).createMinimalRichTextWidget(parent);
		widget.setSaveStrategy(new SaveStrategy() {
			@Override
			public void save(final String editorText, final EObject owner, final EStructuralFeature feature) {
				if (NotificationHelper.isNotificationRequired(owner, feature, editorText)) {
				      AbstractReadWriteCommand command = new AbstractReadWriteCommand() {
				        public void run() {
				        	owner.eSet(feature, editorText);
				        }
				      };
				      executeCommand(command);
				 }
			}
			
			protected void executeCommand(final ICommand command) {
			    // Precondition
			    if ((null == command)) {
			      return;
			    }
			    ICommand cmd = command;
			    if (command instanceof AbstractReadWriteCommand) {
			      cmd = new AbstractReadWriteCommand() {
			        /**
			         * @see java.lang.Runnable#run()
			         */
			        public void run() {
			          command.run();
			        }

			        /**
			         * @see org.polarsys.capella.common.tig.ef.command.AbstractCommand#getAffectedObjects()
			         */
			        @SuppressWarnings("synthetic-access")
			        @Override
			        public Collection<?> getAffectedObjects() {
			          return Collections.singletonList(widget.getElement());
			        }

			        /**
			         * @see org.polarsys.capella.common.tig.ef.command.AbstractCommand#getName()
			         */
			        @Override
			        public String getName() {
			          return "Model Edition"; //$NON-NLS-1$
			        }

			        /**
			         * @see org.polarsys.capella.common.tig.ef.command.AbstractCommand#commandInterrupted()
			         */
			        @Override
			        public void commandInterrupted() {
			          commandRolledBack();
			        }

			        /**
			         * @see org.polarsys.capella.common.tig.ef.command.AbstractCommand#commandRolledBack()
			         */
			        @SuppressWarnings("synthetic-access")
			        @Override
			        public void commandRolledBack() {
			          // Reload data >> refresh the UI.
			          loadData(widget.getElement());
			        }
			      };
			    }
			    // Execute it against the TED.
			    TransactionHelper.getExecutionManager(widget.getElement()).execute(cmd);
			  }
		});
		return widget;
	}
<%}%>